<?	class BimServerApi {		function __construct($apiUrl) {			$this->apiUrl = $apiUrl;		}				private function do_post_request($url, $data, $optional_headers = null) {			$ch = curl_init($url);			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);			curl_setopt($ch, CURLOPT_HTTPHEADER, array(                                                                          				'Content-Type: application/json',                                                                                				'Content-Length: ' . strlen($data))                                                                       			);   			$response = curl_exec($ch);			if ($response == FALSE) {				throw new Exception(curl_error($ch));			}			curl_close($ch);			return $response;		}				private function convertJsonDecodeError($error) {			switch ($error) {				case JSON_ERROR_NONE:					return ' - No errors';				break;				case JSON_ERROR_DEPTH:					return ' - Maximum stack depth exceeded';				break;				case JSON_ERROR_STATE_MISMATCH:					return ' - Underflow or the modes mismatch';				break;				case JSON_ERROR_CTRL_CHAR:					return ' - Unexpected control character found';				break;				case JSON_ERROR_SYNTAX:					return ' - Syntax error, malformed JSON';				break;				case JSON_ERROR_UTF8:					return ' - Malformed UTF-8 characters, possibly incorrectly encoded';				break;				default:					return ' - Unknown error';				break;			}		}		private function call($request) {			$data = json_encode($request);			$response = json_decode($this->do_post_request($this->apiUrl, $data), true);			if ($response == NULL) {				throw new Exception("JSON could not be decoded " . $this->convertJsonDecodeError(json_last_error()));			}			if (array_key_exists("responses", $response)) {				$responses = $response["responses"];				if (count($responses) > 0) {					$firstResponse = $responses[0];					if (array_key_exists("result", $firstResponse)) {						return $firstResponse["result"];					} else if (array_key_exists("exception", $firstResponse)) {						$exception = $firstResponse["exception"];						if (array_key_exists("message", $exception)) {							throw new Exception($exception["message"]);						} else {							throw new Exception("Unknown exception (no message)");						}					}				} else {					throw new Exception("No response");				}			}		}				private function buildRequest($token, $interface, $method, $parameters) {			$request = array(				"token" => array(					"tokenString" => $token['tokenString'],					"expires" => $token['expires']				),				"requests" => array(					array(						"interface" => $interface,						"method" => $method,						"parameters" => $parameters					)				)			);			return $request;		}		public function processIncoming($data, $handler) {			$input = json_decode($data, true);			if ($input == null) {				error_log(json_last_error());			}			$requests = $input["requests"];						foreach ($requests as $key => $request) {				$interface = $request["interface"];				$method = $request["method"];				$reflectionMethod = new ReflectionMethod(get_class($handler), $method);				$result = $reflectionMethod->invokeArgs($handler, $request["parameters"]);								$responseObject = array(					"responses" => array(						array(							"result" => $result						)					)				);								$json = json_encode($responseObject);				if ($json == FALSE) {					throw new Exception("Error encoding JSON");				}				return $json;			}		}				public function getExtendedDataSchemaByNamespace($token, $ns) {			$request = $this->buildRequest($token, "ServiceInterface", "getExtendedDataSchemaByNamespace", array(				"namespace" => $ns			));			return $this->call($request);		}				public function addExtendedDataToRevision($token, $roid, $title, $data, $schemaId) {			$request = $this->buildRequest($token, "ServiceInterface", "uploadFile", array(				"file" => array(					"__type" => "SFile",					"data" => base64_encode($data),					"mime" => "text/html",					"filename" => "test.html"				)			));			$fileId = $this->call($request);			$request = $this->buildRequest($token, "ServiceInterface", "addExtendedDataToRevision", array(				"roid" => $roid,				"extendedData" => array(					"__type" => "SExtendedData",					"fileId" => $fileId,					"title" => $title,					"schemaId" => $schemaId				)			));			return $this->call($request);		}				public function getDataObjects($token, $roid) {			$request = $this->buildRequest($token, "ServiceInterface", "getDataObjects", array(				"roid" => $roid			));			return $this->call($request);		}	}?>